basic unit of data is a piece
a piece has a type: (official, commission, fan-created)
a piece has tags
a piece can have upto 1 canonical media (txt, png, jpeg, etc)
a piece can have drafts
    a draft has a piece of media attached and some metadata
a piece can have raws
    a raw has a piece of media attached and some metadata
a piece can have variants
    a variant has a piece of media attached and some metadata
    each variant can have additional tags which are union'd with the piece's tags
a piece can have a price:
    a base price
    a tip

a media has
    a date added
    optionally a list of links to sources
    rating: safe, tasteful, explicit

basic tag info is
    a name
    a description

a tag when associated with piece has
    optionally a category

starting categories are:
    character:
    artist:
    (none):

categories have:
    a color
    a description
    



consider putting app_state behind a Mutex, so the gui thread can write to it

put the DB behind an Arc<RwLock>?

crate tab based system, where each tab is its own ui rendering and data editing.

decide how often to save?

1) Arc<RwLock<_>> only the relevant parts of state that the UI looks at
2) create task for handling those messages
3) move to messaging
4) separate channel for each task type
5) start working into backend, to create help methods to create pieces, et.al