use chrono::Local;
use db::{BlobType, Tag, Category};
use imgui::{im_str, Ui};

use super::{GuiHandle, GuiView};

#[derive(Debug)]
pub struct Help;

impl GuiView for Help {
    fn update(&self, _: &super::GuiHandle) {}
    fn draw_main(&mut self, _: &GuiHandle, _: &super::InnerGuiState, ui: &imgui::Ui<'_>) {
        ui.text(im_str!("Help Screen"));

        sub_heading(ui, "Basics", || {
            items(ui, &[
                "Most UI elements have tooltips, hover over them to find out!",
                "Most screens have buttons to click to bring you to further detail.",
                "Double-right click to go back to the previous screen."
            ]); 
        });

        sub_heading(ui, "Editing", || {
            items(ui, &[ 
                "When editing text fields, you must hit Enter to confirm your change.  If you don't your changes won't be saved.",
                "Changes are saved automatically as you edit your collection.", 
            ]);
        });

        sub_heading(ui, "Blobs", || {
            items(ui, &[
                "When you add an image (henceforth called a 'blob'), it will be copied, but NOT deleted, from its original location to the database location.",
                "The blobs file name will be it's old filename pre-pended with an autogenerated Blob ID.",
                "If you edit the name of a blob, it will automatically rename the file.",
            ]);
        });
    }

    fn draw_explorer(&mut self, _: &GuiHandle, _: &super::InnerGuiState, _: &imgui::Ui<'_>) {}
}

fn sub_heading<F: FnOnce()>(ui: &Ui<'_>, label: &str, f: F) {
    ui.bullet_text(&im_str!("{}", label));
    ui.indent();
    f();
    ui.unindent();
}

fn items(ui: &Ui<'_>, labels: &[&str]) {
    for label in labels {
        wrapped_bullet(ui, label)
    }
}

fn wrapped_bullet(ui: &Ui<'_>, s: &str) {
    ui.bullet();
    ui.same_line();
    ui.text_wrapped(&im_str!("{}", s));
}
